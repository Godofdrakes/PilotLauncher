<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:local="clr-namespace:PilotLauncher.PropertyGrid"
	xmlns:system="clr-namespace:System;assembly=System.Runtime">

	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="Converters/Converters.xaml" />
	</ResourceDictionary.MergedDictionaries>

	<!-- Read-only "ToString" template, works for all types  -->
	<DataTemplate x:Key="PilotLauncher.PropertyGridItem.Unknown"
		DataType="{x:Type local:PropertyGridItem}">
		<TextBlock Text="{Binding Value, Mode=OneWay}" />
	</DataTemplate>

	<!-- string editor template -->
	<DataTemplate x:Key="PilotLauncher.PropertyGridItem.String"
		DataType="{x:Type local:PropertyGridItem}">
		<TextBox Text="{Binding Value,
			UpdateSourceTrigger=PropertyChanged}" />
	</DataTemplate>

	<!-- enum selector template -->
	<DataTemplate x:Key="PilotLauncher.PropertyGridItem.Enum"
		DataType="{x:Type local:PropertyGridItem}">
		<ComboBox
			SelectedValue="{Binding Value,
				UpdateSourceTrigger=PropertyChanged}"
			ItemsSource="{Binding PropertyInfo.PropertyType,
				Converter={StaticResource EnumItemsConverter},
				Mode=OneTime}" />
	</DataTemplate>

	<!-- template selector for the view of a property value -->
	<local:PropertyGridTemplateSelector x:Key="PilotLauncher.PropertyGrid.EditTemplateSelector">
		<local:PropertyGridTemplate
			Match="{local:PropertyMatch IsReadOnly=False, IsEnum=True}"
			DataTemplate="{StaticResource PilotLauncher.PropertyGridItem.Enum}">
		</local:PropertyGridTemplate>

		<local:PropertyGridTemplate
			Match="{local:PropertyMatch IsReadOnly=False, ExactType={x:Type system:String}}"
			DataTemplate="{StaticResource PilotLauncher.PropertyGridItem.String}">
		</local:PropertyGridTemplate>

		<!-- fallback for all unhandled types -->
		<local:PropertyGridTemplate
			DataTemplate="{StaticResource PilotLauncher.PropertyGridItem.Unknown}" />
	</local:PropertyGridTemplateSelector>

	<!-- style for the DataGrid within a PropertyGrid -->
	<Style x:Key="PilotLauncher.PropertyGrid.DataGridStyle" TargetType="DataGrid"
		BasedOn="{StaticResource {x:Type DataGrid}}">
		<Setter Property="AutoGenerateColumns" Value="False" />
		<Setter Property="IsReadOnly" Value="True" />
	</Style>

	<!-- control template for the PropertyGrid -->
	<ControlTemplate x:Key="PilotLauncher.PropertyGrid.ControlTemplate" TargetType="local:PropertyGrid">
		<DataGrid x:Name="DataGrid"
			Style="{StaticResource PilotLauncher.PropertyGrid.DataGridStyle}"
			ItemsSource="{TemplateBinding PropertyItems}">

			<DataGrid.Columns>
				<DataGridTextColumn x:Name="PropertyNameColumn"
					Header="Name" Width="Auto"
					Binding="{Binding PropertyInfo.Name}" />

				<DataGridTextColumn x:Name="PropertyTypeColumn"
					Header="Type" Width="Auto"
					Binding="{Binding PropertyInfo.PropertyType.Name}" />

				<!-- CellTemplateSelector is assigned by PropertyGrid -->
				<DataGridTemplateColumn x:Name="PropertyValueColumn"
					Header="Value" Width="*" />
			</DataGrid.Columns>
		</DataGrid>
	</ControlTemplate>

	<!-- default style for the PropertyGrid -->
	<Style TargetType="local:PropertyGrid">
		<Setter Property="Template"
			Value="{StaticResource PilotLauncher.PropertyGrid.ControlTemplate}" />
		<Setter Property="PropertyTemplateSelector"
			Value="{StaticResource PilotLauncher.PropertyGrid.EditTemplateSelector}" />
	</Style>

</ResourceDictionary>